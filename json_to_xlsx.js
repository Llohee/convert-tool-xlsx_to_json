const fs = require("fs")
const path = require("path")
const xlsx = require("xlsx")

const inputDir = path.join(__dirname, "input_file_json")
const outputDir = path.join(__dirname, "output_file_xlsx")

// Ki·ªÉm tra th∆∞ m·ª•c input
if (!fs.existsSync(inputDir)) {
  console.error("‚ùå Th∆∞ m·ª•c input_file_json kh√¥ng t·ªìn t·∫°i!")
  process.exit(1)
}

// T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir)
}

function jsonToXlsx() {
  try {
    // ƒê·ªçc t·∫•t c·∫£ c√°c file JSON trong th∆∞ m·ª•c input
    const jsonFiles = fs.readdirSync(inputDir)
      .filter(file => file.endsWith('.json'))

    if (jsonFiles.length === 0) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y file JSON n√†o trong th∆∞ m·ª•c input_file_json")
      return
    }

    console.log(`üìÇ T√¨m th·∫•y ${jsonFiles.length} file JSON ƒë·ªÉ x·ª≠ l√Ω`)

    // ƒê·ªçc t·∫•t c·∫£ c√°c file JSON v√† g·ªôp d·ªØ li·ªáu
    const allData = {}
    const languages = new Set()

    jsonFiles.forEach(jsonFile => {
      try {
        const lang = path.parse(jsonFile).name
        const filePath = path.join(inputDir, jsonFile)
        const data = JSON.parse(fs.readFileSync(filePath, 'utf8'))
        
        languages.add(lang)
        
        // G·ªôp d·ªØ li·ªáu theo key
        Object.entries(data).forEach(([key, value]) => {
          if (!allData[key]) {
            allData[key] = { KEY: key }
          }
          allData[key][lang] = value
        })

        console.log(`‚úÖ ƒê√£ ƒë·ªçc file ${jsonFile}`)
      } catch (error) {
        console.error(`‚ùå L·ªói khi ƒë·ªçc file ${jsonFile}:`, error.message)
      }
    })

    // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh m·∫£ng v√† s·∫Øp x·∫øp theo KEY
    const rows = Object.values(allData).sort((a, b) => a.KEY.localeCompare(b.KEY))

    // T·∫°o workbook m·ªõi
    const workbook = xlsx.utils.book_new()
    const worksheet = xlsx.utils.json_to_sheet(rows)

    // ƒê·∫∑t ƒë·ªô r·ªông c·ªôt
    const colWidths = [
      { wch: 100 }, // KEY column
      ...Array(languages.size).fill({ wch: 100 }) // Language columns
    ]
    worksheet['!cols'] = colWidths

    // Th√™m worksheet v√†o workbook
    xlsx.utils.book_append_sheet(workbook, worksheet, 'Translations')

    // L∆∞u file XLSX
    const outputPath = path.join(outputDir, 'Sac_Devportal_Locales.xlsx')
    xlsx.writeFile(workbook, outputPath)

    console.log("üéâ Xu·∫•t file XLSX th√†nh c√¥ng!")
  } catch (error) {
    console.error("‚ùå C√≥ l·ªói x·∫£y ra:", error.message)
  }
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh
jsonToXlsx() 